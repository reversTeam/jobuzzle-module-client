/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:12:48
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-10-12 15:47:23
**************************************************************/

class ClientAuthMainService extends MasterService {

	_store = undefined;
	_token = undefined;
	_cookie = undefined;

	#default get, set for _sock;

	initialize : function () {
		_super();
		var serviceManager = serviceLocator.get('ServiceManager');

		this._cookie = serviceManager.get('navigation_cookie_main_service');
		this._token = this._cookie.get('token');
		this.setSock(serviceManager.get('client_websocket_main_service'));
		this.setStore(serviceLocator.get('ServiceManager').get('store_manager_main_service'));
		this._sock.on('auth', this, this.auth);

	}

	public onListen : function () {
		var dispatcher = _super();

		dispatcher.listen('Client:Websocket:connect', this, this._connect.bind(this));
	}

	_connect : function () {
		var router = serviceLocator.get('Router');
		var serviceManager = serviceLocator.get('ServiceManager');

		if (!this._token)
			this._token = prompt('Give me a token : ');

		this._sock.send('auth', {
			'token' : this._token
		});
	}

	auth : function (data) {
		var serviceManager = serviceLocator.get('ServiceManager');
		var store = serviceManager.get('store_manager_main_service');
		if (data != 'Invalid token') {
			store.isMe(data);
			this._cookie.create('token', this._token, 7);
		}
	}

}