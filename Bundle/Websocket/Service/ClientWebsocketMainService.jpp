/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:12:48
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-11-04 18:21:26
**************************************************************/

class ClientWebsocketMainService extends MasterService {

	_io : undefined;
	_sock : undefined;
	_connected : false;
	_host : '';
	_port : '';
	_protocole : '';

	#default get, set for _io;
	#default get, set for _host;
	#default get, set for _port;
	#default get, set for _sock;
	#default get, set for _protocole;

	initialize : function () {
		var config = Config['modules']['Client'];

		_super();
		this.setPort(config['env']['server']['port']);
		this.setHost(config['env']['server']['host']);
		this.setProtocole(config['env']['server']['protocole']);

		// Warning : Connexion it's instantly
		this._initSocket();
	}

	public on : function (listen, obj, callback) {
		this._sock['on'](listen, this._onEvent.bind(this, listen, callback.bind(obj)));
	}

	public send : function (name, data) {
		var dispatcher = serviceLocator.get('Dispatcher');
		if (data == undefined)
			data = {};
		dispatcher.trigger('Client:Websocket:emit.'+ name +'.pre', data);
		this._sock['emit'](name, data);
		dispatcher.trigger('Client:Websocket:emit.'+ name +'.post', data);
	}

	_initSocket : function () {
		var config = Config['modules']['Client'];
		var socket_host = this.getProtocole() +'://'+ this.getHost() +':'+ this.getPort();

		this._sock = window['io']['connect'](socket_host, {
			"reconnectionDelay"		: config['env']['socket']['reconnection_delay'],		// 1000
			"reconnectionDelayMax"	: config['env']['socket']['reconnection_delay_max'],	// 2000
			"timeout"				: config['env']['socket']['timeout'],					// 7000
			"secure"				: config['env']['socket']['secure']
		});

		this._sock['on']('connect', this._connect.bind(this));
		this._sock['on']('connect_error', this._connect_error.bind(this));
		this._sock['on']('connect_timeout', this._connect_timeout.bind(this));
		this._sock['on']('error', this._error.bind(this));
		this._sock['on']('disconnect', this._disconnect.bind(this));
		this._sock['on']('reconnect', this._reconnect.bind(this));
		this._sock['on']('reconnect_attempt', this._reconnect_attempt.bind(this));
		this._sock['on']('reconnecting', this._reconnecting.bind(this));
		this._sock['on']('reconnect_error', this._reconnect_error.bind(this));
		this._sock['on']('reconnect_failed', this._reconnect_failed.bind(this));
	}

	_onEvent: function (name, callback, data) {
		var dispatcher = serviceLocator.get('Dispatcher');
		dispatcher.trigger('Client:Websocket:on.'+ name +'.pre', data);
		callback(data);
		dispatcher.trigger('Client:Websocket:on.'+ name + '.post', data);
	}

	_connect : function (data) {
		var dispatcher = serviceLocator.get('Dispatcher');

		this._connected = true;
		dispatcher.trigger('Client:Websocket:connect', data);
		console.log('_connect');
	}

	_connect_error : function (data) {
		var dispatcher = serviceLocator.get('Dispatcher');

		dispatcher.trigger('Client:Websocket:connect_error', data);
		console.log('_connect_error');
	}

	_connect_timeout : function (data) {
		var dispatcher = serviceLocator.get('Dispatcher');

		dispatcher.trigger('Client:Websocket:connect_timeout', data);
		console.log('_connect_timeout');
	}

	_error : function (err) {
		var dispatcher = serviceLocator.get('Dispatcher');

		dispatcher.trigger('Client:Websocket:error', err);
		console.log('_error');
	}

	_disconnect : function () {
		var dispatcher = serviceLocator.get('Dispatcher');

		this._connected = false;
		dispatcher.trigger('Client:Websocket:disconnect');
		console.log('_disconnect');
	}

	_reconnect : function () {
		var dispatcher = serviceLocator.get('Dispatcher');

		dispatcher.trigger('Client:Websocket:reconnect');
		console.log('_reconnect');
	}

	_reconnect_attempt : function () {
		var dispatcher = serviceLocator.get('Dispatcher');

		dispatcher.trigger('Client:Websocket:reconnect_attempt');
		console.log('_reconnect_attempt');
	}

	_reconnecting : function () {
		var dispatcher = serviceLocator.get('Dispatcher');

		dispatcher.trigger('Client:Websocket:reconnecting');
		console.log('_reconnecting');
	}

	_reconnect_error : function () {
		var dispatcher = serviceLocator.get('Dispatcher');

		dispatcher.trigger('Client:Websocket:reconnect_error');
		console.log('_reconnect_error');
	}

	_reconnect_failed : function () {
		var dispatcher = serviceLocator.get('Dispatcher');

		dispatcher.trigger('Client:Websocket:reconnect_failed');
		console.log('_reconnect_failed');
	}

}